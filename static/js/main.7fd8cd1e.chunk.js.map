{"version":3,"sources":["components/SiteHead/index.js","components/Card/index.js","components/ListHeader/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["SiteHead","className","Card","props","alt","last","src","image","title","first","gender","age","phone","email","ListHeader","state","alphabetical","ascending","sortedEmployees","employees","sortName","sortEmp","empList","sort","a","b","nameA","name","toLowerCase","nameB","setState","sortAge","dob","this","length","prevProps","onClick","map","item","index","picture","large","cell","React","Component","Navbar","searchTerm","filteredEmployees","handleInputChange","event","target","value","userTyped","filteredList","filter","indexOf","onChange","type","placeholder","App","axios","get","then","res","data","results","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7fd8cd1e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction SiteHead() {\r\n    return (\r\n<div className = \"wrapper\">\r\n    <div className = \"title\">\r\nEmployee Directory\r\n    </div>\r\n    <br></br>\r\n    <div className = \"tagline\">\r\nFind the Right Employee for You!\r\n    </div>\r\n</div>\r\n\r\n    );\r\n}\r\n\r\nexport default SiteHead;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n\r\n        <div className=\"card\">\r\n            <div><img alt={props.last} src={props.image}></img></div>\r\n            <div>{props.title} {props.first} {props.last} </div>\r\n            <div>{props.gender}</div>\r\n            <div>{props.age}</div>\r\n            <div>{props.phone}</div>\r\n            <div>{props.email}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Card from '../Card';\r\n\r\nclass ListHeader extends React.Component {\r\n\r\n    state = {\r\n        alphabetical: true,\r\n        ascending: true,\r\n        sortedEmployees: [],\r\n        employees: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.sortedEmployees.length < 1) {\r\n            this.setState({\r\n                sortedEmployees: this.props.empList\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.empList !== prevProps.empList) {\r\n            this.setState({\r\n                sortedEmployees: this.props.empList\r\n            })\r\n        }\r\n    }\r\n\r\n    sortName = () => {\r\n        let sortEmp = [];\r\n        if (this.state.alphabetical) {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\r\n                if (nameA < nameB)\r\n                    return -1\r\n                if (nameA > nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        } else {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.name.last.toLowerCase(), nameB = b.name.last.toLowerCase();\r\n                if (nameA > nameB)\r\n                    return -1\r\n                if (nameA < nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        }\r\n        this.setState({\r\n            alphabetical: !this.state.alphabetical,\r\n            sortedEmployees: sortEmp\r\n\r\n        })\r\n    }\r\n\r\n    sortAge = () => {\r\n        let sortEmp = [];\r\n        if (this.state.ascending) {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.dob.age, nameB = b.dob.age;\r\n                if (nameA < nameB)\r\n                    return -1\r\n                if (nameA > nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        } else {\r\n            sortEmp = this.props.empList.sort((a, b) => {\r\n                var nameA = a.dob.age, nameB = b.dob.age;\r\n                if (nameA > nameB)\r\n                    return -1\r\n                if (nameA < nameB)\r\n                    return 1\r\n                return 0\r\n            })\r\n        }\r\n        this.setState({\r\n            ascending: !this.state.ascending,\r\n            sortedEmployees: sortEmp\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                <div className=\"header\">\r\n                    <div>Photo</div>\r\n                    <div><p onClick={this.sortName} className=\"name\">Name</p> </div>\r\n                    <div>Gender</div>\r\n                    <div><p onClick={this.sortAge} className=\"age\">Age</p></div>\r\n                    <div>Phone</div>\r\n                    <div>E-mail</div>\r\n                </div>\r\n\r\n                {\r\n                    this.state.sortedEmployees.length > 0 &&\r\n                    this.state.sortedEmployees.map((item, index) => (\r\n\r\n                            <Card\r\n                                image={item.picture.large}\r\n                                first={item.name.first}\r\n                                last={item.name.last}\r\n                                title={item.name.title}\r\n                                gender={item.gender}\r\n                                age={item.dob.age}\r\n                                phone={item.cell}\r\n                                email={item.email}\r\n                            />\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListHeader;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport ListHeader from '../ListHeader';\r\n\r\nclass Navbar extends React.Component {\r\n\r\n    state = {\r\n        searchTerm: \"\",\r\n        filteredEmployees: []\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (this.state.filteredEmployees.length < 1) {\r\n            this.setState({\r\n                filteredEmployees: this.props.employees\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    handleInputChange = event => {\r\n        this.setState({\r\n            searchTerm: event.target.value\r\n        });\r\n        let userTyped = event.target.value;\r\n        const filteredList = this.props.employees.filter((item) => {\r\n            let values = item.name.title + item.name.first + item.name.last + item.gender + item.dob.age + item.email + item.cell;\r\n            return values.indexOf(userTyped) !== -1;\r\n\r\n        });\r\n\r\n        this.setState({\r\n            filteredEmployees: filteredList\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* {this.fillList} */}\r\n                <form className=\"form\">\r\n                    <input\r\n                        value={this.state.searchTerm}\r\n                        name=\"searchTerm\"\r\n                        onChange={event => this.handleInputChange(event)}\r\n                        type=\"text\"\r\n                        placeholder=\"Search\"\r\n                    />\r\n                </form>\r\n                {this.state.filteredEmployees.length > 0 &&\r\n                    <ListHeader empList={this.state.filteredEmployees} />\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport SiteHead from './components/SiteHead';\r\nimport Navbar from './components/Navbar';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    employees: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n      axios.get(`https://randomuser.me/api/?results=20&nat=Aus`)\r\n        .then(res => {\r\n          this.setState({ employees: res.data.results });\r\n        });\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SiteHead />\r\n        {this.state.employees.length > 0 &&\r\n        <Navbar employees={this.state.employees}/>\r\n  }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}